'use client'; // Runs on client (browser) side

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Input, Textarea, FormField } from '@/components/ui/Input';

// Type definition for data (props) passed to product form component
interface ProductFormProps {
  // Event handler executed on form submission
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
  // Initial values to set for input fields
  initialValues?: {
    name: string;
    image_url?: string | null | undefined;
    description?: string | null | undefined;
    price: number;
    stock?: number;
    is_featured?: boolean;
  };
  submitLabel: string; // Display text for form submit button
}

// Styles cleaned up - now using reusable UI components

// Common product form component
export default function ProductForm({
  onSubmit,
  initialValues = { name: '', image_url: '', description: '', price: 0, stock: 0, is_featured: false },
  submitLabel,
}: ProductFormProps) {
  const router = useRouter();
  const [previewUrl, setPreviewUrl] = useState('');

  // Display registered image initially if available
  useEffect(() => {
    if (initialValues.image_url) {
      setPreviewUrl(`/uploads/${initialValues.image_url}`);
    }
  }, [initialValues.image_url]);

  // Release temporary URL generated by URL.createObjectURL()
  useEffect(() => {
    return () => {
      if (previewUrl && previewUrl.startsWith('blob:')) {
        URL.revokeObjectURL(previewUrl);
      }
    };
  }, [previewUrl]);

  // Event handler for image file selection
  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) { // Clear preview
      setPreviewUrl('');
      return;
    }

    // Generate temporary URL for displaying image in browser
    const tempUrl = URL.createObjectURL(file);
    setPreviewUrl(tempUrl);
  };

  // Event handler for cancel action
  const handleCancel = () => {
    // Show confirmation dialog
    if (confirm('Input content will be discarded. Are you sure?')) {
      router.push('/admin/products'); // Navigate to admin product list page
    }
  };

  return (
    <form
      onSubmit={onSubmit} encType="multipart/form-data"
      className="w-full space-y-6 p-8 bg-white shadow-lg rounded-xl"
    >
      <FormField label="Product Name" required>
        <Input 
          type="text" 
          id="name" 
          name="name" 
          required
          defaultValue={initialValues.name}
        />
      </FormField>

      <FormField label="Product Image" required>
      <div className="flex flex-col gap-6 mt-2">
        <input type="file" id="imageFile" name="imageFile"
          required={!initialValues.image_url}
          accept="image/jpeg,image/png,image/webp" // Allow JPEG, PNG, and WebP files
          onChange={handleImageChange}
          className="text-gray-600 file:bg-gray-50 file:border file:border-gray-300 file:px-4 file:py-2 file:rounded-sm file:cursor-pointer"
        />
        {previewUrl && (
          <div className="px-8" id="imagePreview">
            {/* Since the preview image uses a temporary blob URL, <Image> should not be used here */}
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img src={previewUrl} alt="preview" className="object-cover rounded-md shadow-md" />
          </div>
        )}
      </div>
      </FormField>

      <FormField label="Description">
        <Textarea 
          id="description" 
          name="description" 
          rows={5}
          defaultValue={initialValues.description ?? ''}
        />
      </FormField>

      <FormField label="Price (tax included)" required>
        <Input
          type="number"
          id="price"
          name="price"
          required
          min="0"
          step="0.01"
          defaultValue={initialValues.price.toString()}
        />
      </FormField>

      <FormField label="Stock Quantity" required>
        <Input
          type="number"
          id="stock"
          name="stock"
          required
          min="0"
          step="1"
          defaultValue={initialValues.stock?.toString()}
        />
      </FormField>

      <FormField label="Display as featured product">
        <input
          type="checkbox"
          id="isFeatured"
          name="isFeatured"
          defaultChecked={initialValues.is_featured}
          className="mr-2"
        />
      </FormField>

      <div className="flex justify-end space-x-4 mt-6">
        <button type="button" onClick={handleCancel}
          className="w-1/2 bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 rounded-sm"
        >
          Cancel
        </button>
        <button type="submit"
          className="w-1/2 bg-brand-500 hover:bg-brand-600 text-white font-semibold py-2 rounded-sm"
        >
          {submitLabel}
        </button>
      </div>
    </form>
  );
}